def TF = "ECR"

pipeline {
    agent {
        label 'workernode2'
        //label 'worker_terraform'
    }
    tools {
        terraform 'tf_test'
        }

    stages {
        stage('Checkout') {
            steps {
                // Get some code from a GitHub repository
                checkout([$class: 'GitSCM', branches: [[name: '*/AD-7']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/hchoi36/docker-Java-kubernetes-project']]])
        
            }
        }  

        
        stage('Initialize terrafrom backend') {
            steps {
                dir("${WORKSPACE}/terraform/${TF}") {
                sh 'terraform init'
                }
            }
        }
        
        stage("terraform plan to see results before applying") {
          steps {
            withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'aws_credentials', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    dir("${WORKSPACE}/terraform/${TF}") {
                    sh 'terraform plan'
                    }
            }
          }
        }
        
        stage("Create the resources") {
          steps {
            withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'aws_credentials', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    dir("${WORKSPACE}/terraform/${TF}") {
                    sh 'terraform apply --auto-approve'
                    }
            }
          }
        }

        stage("login to registry") {
          when {
            equals(actual: "${TF}", expected: "ECR")
          }
          steps {
            script {
              def registry_credentials = sh (
                          script: "terraform output -json registry_credentials",
                          returnStdout: true,
                          cwd: "${WORKSPACE}/terraform/${TF}"
                      ).trim().readJSON()

              def container_registry_url = sh (
                  script: "terraform output container_registry_url",
                  returnStdout: true,
                  cwd: "${WORKSPACE}/terraform/${TF}"
              ).trim()
            }
            withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'aws_credentials', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    //dir("${WORKSPACE}/terraform/${TF}") {
                    sh "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $container_registry_url"
                    // sh "docker build -t $container_registry_url/my-image:latest ."
                    // sh "docker push $container_registry_url/my-image:latest"
                    //}
            }
          }
        }
      
        stage("Option to destroy all resources created") {
          input {
            message "Ready to destroy?"
            ok "Yes"
          }
          
          steps {
            withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'aws_credentials', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    dir("${WORKSPACE}/terraform/${TF}") {
                    sh 'terraform destroy --auto-approve'
                    }
            }
          }
        }
      
    }
}
          
